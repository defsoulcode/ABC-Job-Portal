package com.lithan.demo.security;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.authentication.jaas.memory.InMemoryConfiguration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.provisioning.InMemoryUserDetailsManager;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;import com.lithan.demo.dto.UserProfile;import com.lithan.demo.security.RolesHandler;@Configuration@EnableWebSecuritypublic class ApplicationSecurityConfig extends WebSecurityConfigurerAdapter {    private PasswordEncoder passwordencoder;    @Autowired	UserDetailsService userService;	@Autowired	UserDetailsService userDetailService;    @Autowired    ApplicationSecurityConfig (PasswordEncoder encoder){    	this.passwordencoder=encoder;    }        @Autowired    RolesHandler roles;		@Override	protected void configure(HttpSecurity http) throws Exception {		// TODO Auto-generated method stub		http.authorizeRequests()		.antMatchers("/","/register","/register-confirmation","/thankyou",				"/confirmation-email","/resetpassword","/thankyoureset").permitAll()		.antMatchers("/css/**","/assets/**","/js/**","/fonts/**","/img/**").permitAll()		.antMatchers("/admin","/deleteDataAdmin","/updateDataAdmin").hasAuthority("ADMIN")		.antMatchers("/update","/update-profile","/search-job").hasAnyAuthority("ADMIN","USER")		.antMatchers("/search","/search-user","list-job","submit-job").hasAuthority("USER")		.anyRequest()		.authenticated()			.and()		.formLogin()		.successHandler(roles)		.loginPage("/login").usernameParameter("email").passwordParameter("password").permitAll()		.and()		.logout()		.logoutUrl("/logout")		.logoutRequestMatcher(new AntPathRequestMatcher("/logout"))		.clearAuthentication(true)		.invalidateHttpSession(true);			}		@Autowired	AuthenticationProvider authProvider() {		DaoAuthenticationProvider  dao=new DaoAuthenticationProvider();		dao.setPasswordEncoder(passwordencoder);		dao.setUserDetailsService(userService);				return dao;	}}